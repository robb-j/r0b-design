const { join, extname } = require('path')
const { promisify } = require('util')
const fs = require('fs')

const ora = require('ora')
const ms = require('ms')
const Sass = require('sass')
// const Yaml = require('yaml')
const Handlebars = require('handlebars')
const Fiber = require('fibers')

const glob = promisify(require('glob'))
const ncp = promisify(require('ncp').ncp)
const readFile = promisify(fs.readFile)
// const readdir = promisify(fs.readdir)
const writeFile = promisify(fs.writeFile)
const renderSass = promisify(Sass.render)

const _set = require('lodash.set')

// const readYaml = async path => Yaml.parse(await readFile(path, 'utf8'))

// function makeSass({ colors = [], fonts = {} }) {
//   const makeComment = message => ['//', `// ${message}`, '//']
//
//   let sass = ['// Sass variables [autogenerated]', '']
//
//   let allColors = []
//
//   for (let group in colors) {
//     sass.push(...makeComment(group))
//
//     let variables = colors[group]
//
//     for (let name in variables) {
//       allColors.push(`"${name}": $${name}`)
//       sass.push(`$${name}: ${variables[name]}`)
//     }
//
//     sass.push('')
//   }
//
//   for (let group in fonts) {
//     sass.push(...makeComment(group))
//
//     let variables = fonts[group]
//
//     for (let name in variables) {
//       sass.push(`$${name}: ${variables[name]}`)
//     }
//
//     sass.push('')
//   }
//
//   sass.push(...['//', `// colors`, '//'])
//   sass.push(`$colors: (${allColors.join(', ')})`)
//   sass.push('')
//
//   return sass.join('\n')
// }

function nameTemplate(file, base, extension, newExtension = '') {
  return file.replace(`${base}/`, '').replace(extension, '') + newExtension
}

async function registerPartials(base = 'src/partials') {
  for (let file of await glob(join(base, '**/*.html.hbs'))) {
    if (!file.endsWith('.html.hbs')) continue

    let name = nameTemplate(file, base, '.html.hbs')

    Handlebars.registerPartial(name, await readFile(file, 'utf8'))
  }
}

async function loadData(base = 'src/data') {
  let data = {}
  for (let file of await glob(join(base, '**/*.json'))) {
    if (!file.endsWith('.json')) continue

    Object.assign(data, JSON.parse(await readFile(file, 'utf8')))
  }
  return data
}

async function loadAssets(base = 'src/assets') {
  let assets = {}
  for (let file of await glob(join(base, '**/*.*'))) {
    let ext = extname(file)
    _set(
      assets,
      nameTemplate(file, base, ext).split('/'),
      await readFile(file, 'utf8')
    )
  }
  return assets
}

async function renderStyles() {
  // let styles = []
  //
  // for (let file of await glob(join(base, '**/*.sass'))) {
  //   if (!file.endsWith('.sass')) continue
  //
  //   let result = await renderSass({
  //     data: variables + (await readFile(file, 'utf8')),
  //     indentedSyntax: true,
  //     includePaths: [
  //       join(__dirname, 'node_modules')
  //     ],
  //     outputStyle: 'compressed'
  //   })
  //
  //   styles.push(String(result.css))
  // }

  const theme = await renderSass({
    file: join(__dirname, 'src/styles/index.sass'),
    includePaths: [join(__dirname, 'node_modules')],
    outputStyle: 'compressed',
    Fiber
  })

  await writeFile(`dist/styles.css`, theme.css)

  const skeleton = await renderSass({
    file: join(__dirname, 'src/skeleton/skeleton.sass'),
    indentedSyntax: true,
    outputStyle: 'compressed',
    Fiber
  })

  await writeFile('dist/skeleton.css', skeleton.css)
}

// Filter template file paths to generate a name and filter out non-numbered names
function makeSiteNav(templates, base) {
  return templates
    .map(t => nameTemplate(t, base, '.html.hbs'))
    .filter(name => /^\d+-.+$/.test(name))
}

async function renderTemplates(data, sass, base = 'src/templates') {
  let templates = await glob(join(base, '**/*.html.hbs'))

  let skeleton = Handlebars.compile(
    await readFile('src/skeleton/skeleton.html.hbs', 'utf8')
  )

  let ctx = {
    data,
    sitenav: makeSiteNav(templates, base)
  }

  for (let file of templates) {
    if (!file.endsWith('.html.hbs')) continue

    let templateData = await readFile(file, 'utf8')

    await writeFile(
      join('dist', nameTemplate(file, base, '.html.hbs', '.html')),
      skeleton({
        content: Handlebars.compile(templateData)(ctx, { data: ctx }),
        data: data,
        sitenav: ctx.sitenav
      })
    )
  }
}

;(async () => {
  const startTime = Date.now()
  const spinner = ora().start('Building')

  try {
    const data = await loadData()

    await registerPartials()

    await renderStyles()

    data.assets = await loadAssets()

    await ncp('src/assets', 'dist/assets')

    await renderTemplates(data)

    const duration = ms(Date.now() - startTime)
    spinner.succeed(`Built in ${duration}`)
  } catch (error) {
    spinner.fail(error.message)
    console.log(error.stack)
  }
})()
